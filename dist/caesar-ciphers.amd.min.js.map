{"version":3,"file":"caesar-ciphers.amd.min.js","sources":["caesar-ciphers/caesar-cipher.js","caesar-ciphers/string-append.js","caesar-ciphers/effective-string-building.js","caesar-ciphers/string-utils.js","caesar-ciphers/typed-array-buffer.js","caesar-ciphers/node-buffer.js","caesar-ciphers.js"],"names":[],"mappings":"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","sourcesContent":["/* istanbul ignore else */\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\ndefine('caesar-ciphers/caesar-cipher',[],function() {\n  'use strict';\n\n  /**\n    * @module caesar-ciphers\n    */\n\n\n  /**\n    * @class CaesarCipher\n    * @constructor\n    * @param {number} shift cipher key\n    */\n  function CaesarCipher(shift) {\n    var _shift;\n\n    this.getShift = function(){\n      return _shift;\n    };\n\n    this.setShift = function(shift){\n      if (!/^-?\\d+$/.test(shift)) {\n        throw 'Shift \"' + shift + '\" is not an number.';\n      }\n      _shift = ((shift % 26) + 26) % 26;\n      return this;\n    };\n\n    this.setShift(shift || 0);\n  }\n\n  /**\n    * @property id\n    * @type String\n    * @readOnly\n    * @default undefined\n    */\n  CaesarCipher.id = undefined;\n  CaesarCipher.prototype.id = undefined;\n\n  /**\n    * @method encrypt\n    * @param {string} plaintext string to encrpyt\n    * @return {string} encrypted string\n    */\n  CaesarCipher.prototype.encrypt = function(plaintext) {\n    return this.rotate(this.getShift(), String(plaintext));\n  };\n\n  /**\n    * @method decrypt\n    * @param {string} ciphertext string to decrypt\n    * @returns {string} decrypted string\n    */\n  CaesarCipher.prototype.decrypt = function(ciphertext) {\n    return this.rotate(26-this.getShift(), String(ciphertext));\n  };\n\n  /**\n    * @method rotate\n    * @param {number} shift shift to rotate\n    * @param {string} text string to rotate\n    * @return {string}\n    */\n  CaesarCipher.prototype.rotate = function() {\n    throw new Error('must be implemented by subclass!');\n  };\n\n  /**\n    * @method isSupported\n    * @return {boolean}\n    */\n  CaesarCipher.prototype.isSupported = function() {\n    throw new Error('must be implemented by subclass!');\n  };\n\n  return CaesarCipher;\n});\n\n","/* istanbul ignore else */\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\ndefine('caesar-ciphers/string-append',['./caesar-cipher'], function (CaesarCipher) {\n  'use strict';\n\n  /**\n    * @module caesar-ciphers\n    */\n\n\n  /**\n    * @class StringAppend\n    * @constructor\n    * @extends CaesarCipher\n    * @param {number} shift cipher key\n    */\n  function StringAppend(shift) {\n    CaesarCipher.call(this, shift);\n  }\n\n  // LEGACY CHECK\n  if(typeof Object.create === 'function'){\n    StringAppend.prototype = Object.create(CaesarCipher.prototype);\n  }else{\n    // IE6, Safari4 etc\n    StringAppend.prototype = new CaesarCipher();\n  }\n\n  /**\n    * @property id\n    * @type String\n    * @default 'StringAppend'\n    * @readOnly\n    */\n  StringAppend.id = 'StringAppend';\n  StringAppend.prototype.id = 'StringAppend';\n\n  StringAppend.prototype.rotate = function(shift, text) {\n    var buffer = '',\n        i, len, c;\n\n    for (i = 0, len = text.length; i < len; i++) {\n      c = text.charCodeAt(i);\n\n      if (c>64 && c<91) {\n        // upper case\n        buffer += String.fromCharCode(((c - 65 + shift) % 26) + 65);\n      } else if (c>96 && c<123) {\n        // lower case\n        buffer += String.fromCharCode(((c - 97 + shift) % 26) + 97);\n      } else {\n        buffer += String.fromCharCode(c);\n      }\n    }\n    return buffer;\n  };\n\n  StringAppend.isSupported = function() {\n    return true;\n  };\n\n  return StringAppend;\n});\n\n","/* istanbul ignore else */\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\ndefine('caesar-ciphers/effective-string-building',['./caesar-cipher'], function(CaesarCipher) {\n  'use strict';\n\n  /**\n    * @module caesar-ciphers\n    */\n\n\n  /* jshint -W101 */\n  /**\n    * see http://trephine.org/t/index.php?title=Efficient_JavaScript_string_building\n    *\n    * @class EffectiveStringBuilding\n    * @constructor\n    * @extends CaesarCipher\n    * @param {number} shift cipher key\n    */\n  /* jshint +W101 */\n  function EffectiveStringBuilding(shift) {\n    CaesarCipher.call(this, shift);\n  }\n\n  // LEGACY CHECK\n  if(typeof Object.create === 'function'){\n    EffectiveStringBuilding.prototype = Object.create(CaesarCipher.prototype);\n  }else{\n    // IE6, Safari4 etc\n    EffectiveStringBuilding.prototype = new CaesarCipher();\n  }\n\n  /**\n    * @property id\n    * @type String\n    * @default 'EffectiveStringBuilding'\n    * @readOnly\n    */\n  EffectiveStringBuilding.id = 'EffectiveStringBuilding';\n  EffectiveStringBuilding.prototype.id = 'EffectiveStringBuilding';\n\n  EffectiveStringBuilding.prototype.rotate = function(shift, text) {\n    var len = text.length,\n      buffer = new Array(len),\n      i, c;\n\n    for (i = 0; i < len; i++) {\n      c = text.charCodeAt(i);\n\n      if (c>64 && c<91) {\n        // upper case\n        buffer[i] = String.fromCharCode(((c - 65 + shift) % 26) + 65);\n      } else if (c>96 && c<123) {\n        // lower case\n        buffer[i] = String.fromCharCode(((c - 97 + shift) % 26) + 97);\n      } else {\n        buffer[i] = String.fromCharCode(c);\n      }\n    }\n    return buffer.join('');\n  };\n\n  EffectiveStringBuilding.isSupported = function() {\n    return true;\n  };\n\n  return EffectiveStringBuilding;\n});\n\n","/* istanbul ignore else */\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\ndefine('caesar-ciphers/string-utils',[],function () {\n  'use strict';\n\n  /**\n    * @module string-utils\n    */\n\n\n  /* jshint -W101 */\n  /**\n    * Returns the string represented by a buffer\n    *\n    * @see {@link http://updates.html5rocks.com/2012/06/How-to-convert-ArrayBuffer-to-and-from-String}\n    *\n    * @param {Uint16Array} buffer - buffer to convert\n    * @returns {string} representation of buffer\n    */\n  /* jshint +W101 */\n  function uint16ArrayToString(buffer){\n    /* @see {@link https://bugs.webkit.org/show_bug.cgi?id=80797} */\n    var ARGS_MAX = 65535,\n        len = buffer.length,\n        buf = '',\n        startPos = 0,\n        endPos = 0;\n\n    if(len <= ARGS_MAX){\n      return String.fromCharCode.apply(null, buffer);\n    }\n\n    do{\n      if(endPos>len){\n        endPos=len;\n      }else{\n        endPos+=ARGS_MAX;\n      }\n      buf += String.fromCharCode.apply(null, buffer.subarray(startPos,endPos));\n      startPos += ARGS_MAX;\n    }while(endPos < len);\n\n    return buf;\n  }\n\n  uint16ArrayToString.isSupported = function isSupported(){\n    try{\n      return String.fromCharCode.apply(null, new Uint16Array()) === '';\n    }catch(err){\n      return false;\n    }\n  };\n\n  return {\n    uint16ArrayToString: uint16ArrayToString\n  };\n});\n\n","/* istanbul ignore else */\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\ndefine('caesar-ciphers/typed-array-buffer',['./caesar-cipher', './string-utils'],\n  function (CaesarCipher, stringUtils) {\n    'use strict';\n\n    /**\n      * @module caesar-ciphers\n      */\n\n    /**\n      * IE >= v10.0; Firefox >= v4.0; Chrome v7.0; Safari >=v5.1\n      *\n      * see link http://www.khronos.org/registry/typedarray/specs/latest/\n      *\n      * and http://caniuse.com/typedarrays\n      *\n      * @class TypedArrayBuffer\n      * @constructor\n      * @extends CaesarCipher\n      * @param {number} shift cipher key\n      */\n    function TypedArrayBuffer(shift) {\n      CaesarCipher.call(this, shift);\n    }\n\n    // LEGACY CHECK\n    if(typeof Object.create === 'function'){\n      TypedArrayBuffer.prototype = Object.create(CaesarCipher.prototype);\n    }else{\n      // IE6, Safari4 etc\n      TypedArrayBuffer.prototype = new CaesarCipher();\n    }\n\n    /**\n      * @property id\n      * @type String\n      * @default 'TypedArrayBuffer'\n      * @readOnly\n      */\n    TypedArrayBuffer.id = 'TypedArrayBuffer';\n    TypedArrayBuffer.prototype.id = 'TypedArrayBuffer';\n\n    TypedArrayBuffer.prototype.rotate = function(shift, text) {\n      var len = text.length,\n          buffer = new Uint16Array(len),\n          i, c;\n\n      for (i = 0; i < len; i++) {\n        c = text.charCodeAt(i);\n\n        if (c>64 && c<91) {\n          // upper case\n          buffer[i] = ((c - 65 + shift) % 26) + 65;\n        } else if (c>96 && c<123) {\n          // lower case\n          buffer[i] = ((c - 97 + shift) % 26) + 97;\n        } else {\n          buffer[i] = c;\n        }\n      }\n      return stringUtils.uint16ArrayToString(buffer);\n    };\n\n    TypedArrayBuffer.isSupported = function() {\n      return stringUtils.uint16ArrayToString.isSupported();\n    };\n\n    return TypedArrayBuffer;\n  }\n);\n\n","/* istanbul ignore else */\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\ndefine('caesar-ciphers/node-buffer',['./caesar-cipher'], function (CaesarCipher) {\n  'use strict';\n\n  /**\n    * @module caesar-ciphers\n    */\n\n\n  /**\n    * @class NodeBuffer\n    * @constructor\n    * @extends CaesarCipher\n    * @param {number} shift cipher key\n    */\n  function NodeBuffer(shift) {\n    CaesarCipher.call(this, shift);\n  }\n\n  // LEGACY CHECK\n  if(typeof Object.create === 'function'){\n    NodeBuffer.prototype = Object.create(CaesarCipher.prototype);\n  }else{\n    // IE6, Safari4 etc\n    NodeBuffer.prototype = new CaesarCipher();\n  }\n\n  /**\n    * @property id\n    * @type String\n    * @default 'NodeBuffer'\n    * @readOnly\n    */\n  NodeBuffer.id = 'NodeBuffer';\n  NodeBuffer.prototype.id = 'NodeBuffer';\n\n  NodeBuffer.prototype.rotate = function(shift, text) {\n    var buffer = new Buffer(text, 'utf16le'),\n        i, len, c;\n\n    for (i = 0, len = buffer.length; i < len; i+=2) {\n      c = buffer.readUInt16LE(i);\n      if (c>64 && c<91) {\n        // upper case\n        c = ((c - 65 + shift) % 26) + 65;\n      } else if (c>96 && c<123) {\n        // lower case\n        c = ((c - 97 + shift) % 26) + 97;\n      }\n      buffer.writeUInt16LE(c,i);\n    }\n    return buffer.toString('utf16le');\n  };\n\n  NodeBuffer.isSupported = function() {\n    try{\n      var buffer = new Buffer('A', 'utf16le');\n      return buffer.readUInt16LE(0) === 65;\n    }catch(e){\n      return false;\n    }\n    return typeof Buffer === 'function';\n  };\n\n  return NodeBuffer;\n});\n\n","/* istanbul ignore else */\nif (typeof define !== 'function') { var define = require('amdefine')(module); }\n\n/**\n * @module caesar-ciphers\n * @main caesar-ciphers\n */\n\ndefine(\n  'caesar-ciphers',[\n    './caesar-ciphers/string-append',\n    './caesar-ciphers/effective-string-building',\n    './caesar-ciphers/typed-array-buffer',\n    './caesar-ciphers/node-buffer'\n  ],\n  function (StringAppend, EffectiveStringBuilding,\n    TypedArrayBuffer, NodeBuffer) {\n    'use strict';\n\n    /**\n      * @module caesar-ciphers\n      */\n\n\n    var implModules = [\n      // default: last one wins\n      StringAppend,\n      EffectiveStringBuilding,\n      TypedArrayBuffer,\n      NodeBuffer\n    ],\n    ciphers = {},\n    supportedCiphers = {},\n    defaultCipher,\n    i, len, impl;\n\n    // init cipherIds and defaultId\n    for(i=0, len = implModules.length; i<len; i++){\n      impl = implModules[i];\n      ciphers[impl.id] = impl;\n      if(impl.isSupported()){\n        supportedCiphers[impl.id] = impl;\n        defaultCipher = impl;\n      }\n    }\n\n    return {\n      ciphers: ciphers,\n      supportedCiphers: supportedCiphers,\n      defaultCipher: defaultCipher\n    };\n  }\n);\n\n"]}